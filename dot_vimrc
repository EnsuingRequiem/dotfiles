let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '~curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source ~/.vimrc
endif

set nocompatible     " required for vundle
filetype off         " required for vundle

call plug#begin()
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'SirVer/ultisnips'
Plug 'preservim/nerdtree'
Plug 'valloric/youcompleteme'
Plug 'zdharma-continuum/zinit-vim-syntax'
Plug 'pedrohdz/vim-yaml-folds'
Plug 'inkarkat/vim-AdvancedSorters'
Plug 'inkarkat/vim-ingo-library'
Plug 'Yggdroot/indentLine'
if !has('nvim')
    Plug 'rhysd/vim-healthcheck'
endif
Plug 'dense-analysis/ale'
call plug#end()    " make sure all plugins are before here

filetype plugin indent on
syntax on
set background=dark
colorscheme solarized
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set relativenumber
set scrolloff=5
" Mappings

" If at the end of file, j moves line up visually
nnoremap <expr> j line(".") == line('$') ? '<C-e>':'j'

" Emulate scrolloff=5 when jumping to end
nnoremap G G5<C-e>

" maps leader to space for the following map
let mapleader = " "
" maps <sp> w to perform windows actions (Ctrl W) to avoid closing window
nnoremap <leader>w <C-w>
nnoremap <leader>W <C-W>
" maps <sp> t to perform Ctrl T to avoid opening new browser tabs
nnoremap <leader>t <C-t>

" maps NERDTree commands

" restores leader to \
let mapleader = "\\"

" Make resizing easier
nnoremap <C-w><Left> <C-w><
nnoremap <C-w><Right> <C-w>>
nnoremap <C-w><Up> <C-w>+
nnoremap <C-w><Down> <C-w>-

" fixes inpde issues with vim
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" Airline configurations
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#formatter='unique_tail_improved'
let g:airline_powerline_fonts=1


if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal! g`\"" | endif
endif

" Configure indentLine
let g:indentLine_char = '▏'
let g:indentLine_char_list = ['│', '╎', '┆', '┊']
" fix issue with hidden json quotes when using indentline
let g:vim_json_conceal = 0

" Configure folds
set foldlevelstart=20
hi Folded ctermbg=0 cterm=NONE ctermfg=7

" guard for distributions lacking the 'persistent_undo' feature.
if has('persistent_undo')
    " define a path to store persistent undo files.
    let target_path = expand('~/.config/vim-persisted-undo/')    " create the directory and any parent directories
    " if the location does not exist.
    if !isdirectory(target_path)
        call mkdir(target_path, "p")
    endif    " point Vim to the defined undo directory.
    let &undodir = target_path    " finally, enable undo persistence.
    set undofile
endif

" Add filetype handling for chezmoi templates
autocmd BufNewFile,BufRead *.yaml.tmpl set filetype=yaml
autocmd BufNewFile,BufRead *.toml.tmpl set filetype=toml
autocmd BufNewFile,BufRead *.json.tmpl set filetype=json

" Yaml configs
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" ALE Settings
set signcolumn=number
set number
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_format = '[%linter%] %s [%severity%s]'
let g:ale_sign_error = '✘'
highlight ALEErrorSign ctermfg=1
let g:ale_sign_warning = '⚠'
highlight ALEWarningSign ctermfg=3
let g:ale_sign_highlight_linenrs = 1

" YouCompleteMe Settings
let g:ycm_collect_identifiers_from_comments_and_strings = 1
